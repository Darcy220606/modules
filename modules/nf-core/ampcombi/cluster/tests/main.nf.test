nextflow_process {

    name "Test Process AMPCOMBI_CLUSTER"
    script "../main.nf"
    process "AMPCOMBI_CLUSTER"

    tag "modules"
    tag "modules_nfcore"
    tag "ampcombi"
    tag "ampcombi/complete"
    tag "ampcombi/parsetables"
    tag "ampcombi/cluster"
    tag "macrel/contigs"
    tag "ampir"
    tag "gunzip"
    tag "pyrodigal"

    config "./nextflow.config"
    setup {
        run("GUNZIP", alias:"GUNZIP_INPUT_GENOME_1") {
            script "../../../gunzip/main.nf"
                process {
                    """
                    input[0] =  Channel.fromList([
                        tuple([ id:'sample_1', single_end:false ], // meta map
                                file(params.test_data['bacteroides_fragilis']['illumina']['test1_contigs_fa_gz'], checkIfExists: true))
                    ])
                    """
            }
        }
        run("PYRODIGAL", alias:"PYRODIGAL_1") {
            script "../../../pyrodigal/main.nf"
            process {
                """
                input[0] = GUNZIP_INPUT_GENOME_1.out.gunzip
                input[1] = 'gbk'
                """
            }
        }
        run("GUNZIP", alias:"GUNZIP_GBK_1") {
            script "../../../gunzip/main.nf"
            process {
                """
                input[0] =  PYRODIGAL_1.out.annotations
                """
            }
        }
        run("GUNZIP", alias:"GUNZIP_FAA_1") {
            script "../../../gunzip/main.nf"
            process {
                """
                input[0] =  PYRODIGAL_1.out.faa
                """
            }
        }
        run("AMPIR", alias:"AMPIR_1") {
            script "../../../ampir/main.nf"
            process {
                """
                input[0] =  GUNZIP_FAA_1.out.gunzip
                input[1] = "precursor"
                input[2] = 10
                input[3] = "0.7"
                """
            }
        }
        run("MACREL_CONTIGS", alias:"MACREL_CONTIGS_1") {
            script "../../../macrel/contigs/main.nf"
            process {
                """
                input[0] = GUNZIP_INPUT_GENOME_1.out.gunzip
                """
            }
        }
        run("GUNZIP", alias:"GUNZIP_MACREL_1") {
            script "../../../gunzip/main.nf"
            process {
                """
                input[0] =  MACREL_CONTIGS_1.out.amp_prediction
                """
            }
        }
        run("AMPCOMBI_PARSETABLES", alias:"AMPCOMBI_PARSETABLES_1") {
            script "../../../ampcombi/parsetables/main.nf"
            process {
                """
                ch_ampir = AMPIR_1.out.amps_tsv
                ch_macrel = GUNZIP_MACREL_1.out.gunzip

                ch_ampir
                    .mix( ch_macrel )
                    .map{
                        [ it[0], it[1] ]
                    }
                    .collect()
                    .set { ch_input_for_ampcombi }

                input[0] = ch_input_for_ampcombi
                input[1] = GUNZIP_FAA_1.out.gunzip.map{ it[1] }
                input[2] = GUNZIP_GBK_1.out.gunzip.map{ it[1] }
                input[3] = []
                """
            }
        }
        run("PYRODIGAL", alias:"PYRODIGAL_2") {
            script "../../../pyrodigal/main.nf"
            process {
                """
                input[0] =  Channel.fromList([
                    tuple([ id:'sample_2', single_end:false ], // meta map
                    file(params.test_data['sarscov2']['illumina']['contigs_fasta'], checkIfExists: true))
                ])
                input[1] = 'gbk'
                """
            }
        }
        run("GUNZIP", alias:"GUNZIP_GBK_2") {
            script "../../../gunzip/main.nf"
            process {
                """
                input[0] =  PYRODIGAL_2.out.annotations
                """
            }
        }
        run("GUNZIP", alias:"GUNZIP_FAA_2") {
            script "../../../gunzip/main.nf"
            process {
                """
                input[0] =  PYRODIGAL_2.out.faa
                """
            }
        }
        run("AMPIR", alias:"AMPIR_2") {
            script "../../../ampir/main.nf"
            process {
                """
                input[0] =  GUNZIP_FAA_2.out.gunzip
                input[1] = "precursor"
                input[2] = 10
                input[3] = "0.7"
                """
            }
        }
        run("MACREL_CONTIGS", alias:"MACREL_CONTIGS_2") {
            script "../../../macrel/contigs/main.nf"
            process {
                """
                input[0] =  Channel.fromList([
                    tuple([ id:'sample_2', single_end:false ], // meta map
                    file(params.test_data['sarscov2']['illumina']['contigs_fasta'], checkIfExists: true))
                ])
                """
            }
        }
        run("GUNZIP", alias:"GUNZIP_MACREL_2") {
            script "../../../gunzip/main.nf"
            process {
                """
                input[0] =  MACREL_CONTIGS_2.out.amp_prediction
                """
            }
        }
        run("AMPCOMBI_PARSETABLES", alias:"AMPCOMBI_PARSETABLES_2") {
            script "../../../ampcombi/parsetables/main.nf"
            process {
                """
                ch_ampir = AMPIR_2.out.amps_tsv
                ch_macrel = GUNZIP_MACREL_2.out.gunzip

                ch_ampir
                    .mix( ch_macrel )
                    .map{
                        [ it[0], it[1] ]
                    }
                    .collect()
                    .set { ch_input_for_ampcombi }

                input[0] = ch_input_for_ampcombi
                input[1] = GUNZIP_FAA_2.out.gunzip.map{ it[1] }
                input[2] = GUNZIP_GBK_2.out.gunzip.map{ it[1] }
                input[3] = []
                """
            }
        }
        run("AMPCOMBI_COMPLETE") {
            script "../../../ampcombi/complete/main.nf"
            process {
                """
                ch_one = AMPCOMBI_PARSETABLES_1.out.tsv
                ch_two = AMPCOMBI_PARSETABLES_2.out.tsv

                ch_one
                    .mix( ch_two )
                    .map{
                        [ it[1] ]
                    }
                    .collect()
                    .set { ch_input_for_ampcombi }

                input[0] = ch_input_for_ampcombi

                """
            }
        }
    }

    test("ampcombi_cluster - bacteroides_fragilis") {
        when {
            process {
                """
                input[0] = AMPCOMBI_COMPLETE.out.tsv
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("ampcombi_cluster - bacteroides_fragilis - stub") {
        options "-stub"
        when {
            process {
                """
                input[0] = AMPCOMBI_COMPLETE.out.tsv
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
