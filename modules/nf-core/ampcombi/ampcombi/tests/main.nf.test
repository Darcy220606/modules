nextflow_process {

    name "Test Process AMPCOMBI_AMPCOMBI"
    script "../main.nf"
    process "AMPCOMBI_AMPCOMBI"
    tag "modules"
    tag "modules_nfcore"
    tag "antimicrobial peptides"
    tag "pyrodigal"
    tag "modules"
    tag "modules"
    tag "modules"
    tag "ampcombi"
    tag "gunzip"
    tag "ampir"
    tag "macrel"
    tag "macrel/contigs"
    tag "ampcombi/ampcombi"

    config "./nextflow.config"
    setup {
        run("GUNZIP", alias:"GUNZIP_INPUT_GENOME") {
            script "../../../gunzip/main.nf"
                process {
                    """
                    input[0] =  Channel.fromList([
                        tuple([ id:'sample_1', single_end:false ], // meta map
                                file(params.test_data['bacteroides_fragilis']['illumina']['test1_contigs_fa_gz'], checkIfExists: true))
                    ])
                    """
            }
        }
        run("PYRODIGAL") {
            script "../../../pyrodigal/main.nf"
            process {
                """
                input[0] = GUNZIP_INPUT_GENOME.out.gunzip
                input[1] = 'gbk'
                """
            }
        }
        run("GUNZIP", alias:"GUNZIP_FAA") {
            script "../../../gunzip/main.nf"
            process {
                """
                input[0] =  PYRODIGAL.out.faa
                """
            }
        }
        run("AMPIR") {
            script "../../../ampir/main.nf"
            process {
                """
                input[0] =  GUNZIP_FAA.out.gunzip
                input[1] = "precursor"
                input[2] = 10
                input[3] = "0.7"
                """
            }
        }
        run("MACREL_CONTIGS") {
            script "../../../macrel/contigs/main.nf"
            process {
                """
                input[0] = GUNZIP_INPUT_GENOME.out.gunzip
                """
            }
        }
        run("GUNZIP", alias:"GUNZIP_MACREL") {
            script "../../../gunzip/main.nf"
            process {
                """
                input[0] =  MACREL_CONTIGS.out.amp_prediction
                """
            }
        }
    }

    test("ampcombi_ampcombi - bacteroides_fragilis") {
        when {
            process {
                """
                ch_ampir = AMPIR.out.amps_tsv
                ch_macrel = GUNZIP_MACREL.out.gunzip

                ch_ampir
                    .mix( ch_macrel )
                    .map{
                        [ it[0], it[1] ]
                    }
                    .collect()
                    .set { ch_input_for_ampcombi }

                input[0] = ch_input_for_ampcombi
                input[1] = GUNZIP_FAA.out.gunzip.map{ it[1] }
                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("ampcombi_ampcombi - bacteroides_fragilis - stub") {
        options "-stub"
        when {
            process {
                """
                ch_ampir = AMPIR.out.amps_tsv
                ch_macrel = GUNZIP_MACREL.out.gunzip

                ch_ampir
                    .mix( ch_macrel )
                    .map{
                        [ it[0], it[1] ]
                    }
                    .collect()
                    .set { ch_input_for_ampcombi }

                input[0] = ch_input_for_ampcombi
                input[1] = GUNZIP_FAA.out.gunzip.map{ it[1] }
                input[2] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
