nextflow_process {

    name "Test Process AMPCOMBI_COMPLETE"
    script "../main.nf"
    process "AMPCOMBI_COMPLETE"

    tag "modules"
    tag "modules_nfcore"
    tag "ampcombi"
    tag "ampcombi/complete"
    tag "ampcombi/parsetables"

    config "./nextflow.config"
    setup {
        run("AMPCOMBI_PARSETABLES", alias:"AMPCOMBI_PARSETABLES_1") {
            script "../../../ampcombi/parsetables/main.nf"
            process {
                """
                amp_input = [[id:'sample_1'],
                             [file('https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/ampcombi/test_files_0.2/ampir/sample_1/sample_1.ampir.tsv', checkIfExists: true),
                              file('https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/ampcombi/test_files_0.2/amplify/sample_1/sample_1.amplify.tsv', checkIfExists: true)]
                              ]
                faa_input = file('https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/ampcombi/test_faa_0.2/sample_1.faa', checkIfExists: true)
                gbk_input = file('https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/ampcombi/test_gbk_0.2/sample_1.gbff', checkIfExists: true)

                input[0] = amp_input
                input[1] = faa_input
                input[2] = gbk_input
                input[3] = []
                """
            }
        }
        run("AMPCOMBI_PARSETABLES", alias:"AMPCOMBI_PARSETABLES_2") {
            script "../../../ampcombi/parsetables/main.nf"
            process {
                """
                amp_input = [[id:'sample_2'],
                             [file('https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/ampcombi/test_files_0.2/ampir/sample_2/sample_2.ampir.tsv', checkIfExists: true),
                              file('https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/ampcombi/test_files_0.2/amplify/sample_2/sample_2.amplify.tsv', checkIfExists: true)]
                              ]
                faa_input = file('https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/ampcombi/test_faa_0.2/sample_2.faa', checkIfExists: true)
                gbk_input = file('https://github.com/nf-core/test-datasets/raw/modules/data/delete_me/ampcombi/test_gbk_0.2/sample_2.gbff', checkIfExists: true)

                input[0] = amp_input
                input[1] = faa_input
                input[2] = gbk_input
                input[3] = []
                """
            }
        }
    }

    test("ampcombi_complete - bacteroides_fragilis") {
        when {
            process {
                """
                ch_one = AMPCOMBI_PARSETABLES_1.out.tsv.map{ it[1] }
                ch_two = AMPCOMBI_PARSETABLES_2.out.tsv.map{ it[1] }

                ch_one
                    .mix( ch_two )
                    .collect()
                    .set { ch_input_for_ampcombi_complete }

                input[0] = ch_input_for_ampcombi_complete
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.tsv[0]).name,
                    process.out.versions
                ).match() }
            )
        }
    }

    test("ampcombi_complete - bacteroides_fragilis - stub") {
        options "-stub"
        when {
            process {
                """
                ch_one = AMPCOMBI_PARSETABLES_1.out.tsv.map{ it[1] }
                ch_two = AMPCOMBI_PARSETABLES_2.out.tsv.map{ it[1] }

                ch_one
                    .mix( ch_two )
                    .collect()
                    .set { ch_input_for_ampcombi_complete }

                input[0] = ch_input_for_ampcombi_complete
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
