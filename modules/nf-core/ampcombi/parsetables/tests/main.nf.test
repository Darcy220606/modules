nextflow_process {

    name "Test Process AMPCOMBI_PARSETABLES"
    script "../main.nf"
    process "AMPCOMBI_PARSETABLES"
    tag "modules"
    tag "modules_nfcore"
    tag "antimicrobial peptides"
    tag "gunzip"
    tag "ampir"
    tag "amplify"
    tag "amplify_predict"
    tag "macrel_contigs"
    tag "ampcombi/parsetables"

    config "./nextflow.config"
    //setup {
        //run("PRODIGAL") {
        //    script "../../../prodigal/main.nf"
        //    process {
        //        """
        //        input[0] = [
        //                    [ id:'sample_test', single_end:false ], // meta map
        //                    file(params.test_data['sarscov2']['illumina']['contigs_fasta'], checkIfExists: true)
        //                   ]
        //        input[1] =  'gbk'
        //        """
        //    }
        //}
        //run("GUNZIP", alias:"GUNZIP_GBK") {
        //    script "../../../gunzip/main.nf"
        //    process {
        //        """
        //        input[0] =  PRODIGAL.out.gene_annotations
        //
        //        """
        //    }
        //}
        //run("GUNZIP", alias:"GUNZIP_FAA") {
        //    script "../../../gunzip/main.nf"
        //    process {
        //        """
        //        input[0] =  PRODIGAL.out.amino_acid_fasta
        //
        //        """
        //    }
        //}
        //setup {
        //    run("PYRODIGAL") {
        //        script "../../../pyrodigal/main.nf"
        //        process {
        //            """
        //            input[0] =  Channel.fromList([
        //                tuple([ id:'sample_1', single_end:false ], // meta map
        //                file(params.test_data['sarscov2']['illumina']['contigs_fasta'], checkIfExists: true))
        //            ])
        //            input[1] = 'gbk'
        //            """
        //        }
        //    }
        //    run("GUNZIP", alias: "GUNZIP_FAA") {
        //        script "../../../gunzip/main.nf"
        //        process {
        //            """
        //            input[0] =  PYRODIGAL.out.faa
//
        //            """
        //        }
        //    }
        //    //run("GUNZIP", alias: "GUNZIP_GBK") {
        //    //    script "../../../gunzip/main.nf"
        //    //    process {
        //    //        """
        //    //        input[0] =  PYRODIGAL.out.annotations
////
        //    //        """
        //    //    }
        //    //}
        //    run("AMPLIFY_PREDICT") {
        //        script "../../../amplify/predict/main.nf"
        //        process {
        //            """
        //            input[0] =  GUNZIP_FAA.out.gunzip
        //            input[1] = []
        //            """
        //        }
        //    }
        //run("AMPIR") {
        //    script "../../../ampir/main.nf"
        //    process {
        //        """
        //        input[0] = GUNZIP_FAA.out.gunzip
        //        input[1] = "precursor" // model
        //        input[2] = 10          // min_length
        //        input[3] = "0.5"       // min_probability
        //        """
        //    }
        //}
    //}
    setup {
        run("GUNZIP", alias:"GUNZIP_INPUT_GENOME") {
            script "../../../gunzip/main.nf"
                process {
                    """
                    input[0] =  Channel.fromList([
                        tuple([ id:'sample_1', single_end:false ], // meta map
                                file(params.test_data['bacteroides_fragilis']['illumina']['test1_contigs_fa_gz'], checkIfExists: true))
                    ])
                    """
            }
        }
        run("PYRODIGAL") {
            script "../../../pyrodigal/main.nf"
            process {
                """
                input[0] = GUNZIP_INPUT_GENOME.out.gunzip
                input[1] = 'gbk'
                """
            }
        }
        run("GUNZIP", alias:"GUNZIP_GBK") {
            script "../../../gunzip/main.nf"
            process {
                """
                input[0] =  PYRODIGAL.out.annotations

                """
            }
        }
        run("GUNZIP", alias:"GUNZIP_FAA") {
            script "../../../gunzip/main.nf"
            process {
                """
                input[0] =  PYRODIGAL.out.faa

                """
            }
        }
        //run("AMPLIFY_PREDICT") {
        //    script "../../../amplify/predict/main.nf"
        //    process {
        //        """
        //        input[0] = GUNZIP_FAA.out.gunzip
        //        input[1] = []
        //        """
        //    }
        //}
        run("MACREL_CONTIGS") {
            script "../../../macrel/contigs/main.nf"
            process {
                """
                input[0] =  [
                             [id:'sample_1', single_end:false ], // meta map
                             file( GUNZIP_INPUT_GENOME.out.gunzip.map{ it[1] } ) //file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                            ]
                """
            }
        }
        run("GUNZIP", alias:"GUNZIP_MACREL") {
            script "../../../gunzip/main.nf"
            process {
                """
                input[0] =  MACREL_CONTIGS.out.amp_prediction
                """
            }
        }

    }


    test("ampcombi_parsetables - sarscov2") {

        when {
            process {
                """
                //ch_amplify = AMPLIFY_PREDICT.out.tsv
                ch_amplify = GUNZIP_MACREL.out.gunzip
                ch_ampir = GUNZIP_MACREL.out.gunzip

                ch_amplify
                    .mix( ch_ampir )
                    .map{
                        [ it[1] ]
                    }
                    .collect()
                    .set { ch_input_for_ampcombi }

                input[0] = [
                    [ id:'sample_1'],
                    [ ch_input_for_ampcombi ]
                ]
                input[1] = GUNZIP_FAA.out.gunzip.map{ it[1] }
                input[2] = GUNZIP_GBK.out.gunzip.map{ it[1] }
                input[3] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success }
                //{ assert snapshot(process.out).match() }
            )
        }
    }
}

//    test("sarscov2") {
//
//        options "-stub"
//
//        when {
//            process {
//                """
//                // TODO nf-core: define inputs of the process here. Example:
//
//                input[0] = [
//                    [ id:'test', single_end:false ], // meta map
//                    file(params.test_data['sarscov2']['illumina']['test_paired_end_bam'], checkIfExists: true)
//                    ]
//                """
//            }
//        }
//
//        then {
//            assertAll(
//                { assert process.success },
//                { assert snapshot(process.out).match() }
//            )
//        }
//
//    }
//}
